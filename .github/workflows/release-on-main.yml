name: Release on main

on:
  push:
    branches: [ "main" ]

jobs:
  build-win:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # 1) Version lokal erhöhen, aber KEIN Tag/Push
      - name: Bump version (patch) locally only
        shell: pwsh
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          npm version patch --no-git-tag-version
          $ver = node -p "require('./package.json').version"
          "ver=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "v$ver"

      - name: Install deps
        run: npm ci

      - name: Build app (webpack -> release/app)
        run: npm run build

      - name: Validate PFX password
        shell: pwsh
        run: |
          $bytes = [Convert]::FromBase64String("${{ secrets.CSC_LINK }}")
          $pfx   = "$env:RUNNER_TEMP\cs.pfx"
          [IO.File]::WriteAllBytes($pfx, $bytes)
          certutil -p "${{ secrets.CSC_KEY_PASSWORD }}" -dump $pfx

      # 2) Build & Publish – erstellt Release + latest.yml + Assets
      - name: Publish (electron-builder -> GitHub Release)
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          Write-Host "Packaging with version $env:ver"
          npx electron-builder --win nsis --publish always --config.extraMetadata.version="$env:ver"

      # 3) Erst JETZT taggen & committen (damit bei Fehler kein „Tag ohne Release" entsteht)
      - name: Commit bumped version and push tag
        if: ${{ success() }}
        shell: bash
        run: |
          if ! git diff --quiet; then
            git add package.json package-lock.json || true
            git commit -m "ci(release): v${{ env.ver }} [skip ci]"
          fi
          git tag "v${{ env.ver }}"
          git push --follow-tags

      # 4) Release-Body zweisprachig setzen (nachdem der Tag existiert)
      - name: Update GitHub Release body (German + English)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = `v${process.env.ver}`;
            const { owner, repo } = context.repo;
            const rel = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
            const downloadUrl = `https://github.com/${owner}/${repo}/releases/latest/download/Apprenticeship-Reports-Setup.exe`;
            const body = `
            Download & Hinweise

            Nur die Datei "Apprenticeship-Reports-Setup.exe" herunterladen und ausführen.

            - Die Dateien "latest.yml" und "*.exe.blockmap" sind für den Auto-Updater.
            - "Source code (zip/tar.gz)" wird von GitHub automatisch erzeugt.

            Direktdownload: ${downloadUrl}

            ---

            Download & Notes

            Download and run only "Apprenticeship-Reports-Setup.exe".

            - "latest.yml" and "*.exe.blockmap" are for the auto-updater.
            - "Source code (zip/tar.gz)" is auto-generated by GitHub.

            Direct download: ${downloadUrl}
            `.trim();
            await github.rest.repos.updateRelease({
              owner, repo, release_id: rel.data.id, body
            });

      # 5) README automatisch zweisprachig aktualisieren (mit [skip ci])
      - name: Update README.md with latest version and dates
        if: ${{ success() }}
        shell: pwsh
        run: |
          $ver = $env:ver
          $dateDE = (Get-Date).ToString('dd.MM.yyyy')
          $dateEN = (Get-Date).ToString('MMMM d, yyyy', [Globalization.CultureInfo]::GetCultureInfo('en-US'))
          $owner = "${{ github.repository_owner }}"
          $repo  = "${{ github.event.repository.name }}"
          $download = "https://github.com/$owner/$repo/releases/latest/download/Apprenticeship-Reports-Setup.exe"

          $content = @"
          # Apprenticeship Reports

          Download / Herunterladen

          [Download for Windows]($download)

          ---

          ## Aktuelle Version
          - Version: v$ver
          - Veröffentlicht am: $dateDE

          ## Latest Version
          - Version: v$ver
          - Released on: $dateEN

          ---

          ### Hinweise / Notes
          - Nur "Apprenticeship-Reports-Setup.exe" manuell laden. / Download only "Apprenticeship-Reports-Setup.exe".
          - "latest.yml" und "*.blockmap" werden vom Auto-Updater genutzt. / used by the auto-updater.
          - "Source code" Archive sind GitHub-Generierung. / auto-generated by GitHub.
          "@

          Set-Content -Path README.md -Value $content -Encoding UTF8
          git add README.md
          git commit -m "docs(readme): update to v$ver [skip ci]" || exit 0
          git push